{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial: Simple Fit\n",
    "\n",
    "This will be the main tutorial for $\\rm dynamicall^{TM}$, a package for fitting dynamical mass models to kinematic data (It does other stuff too) <!-- TODO: Add link to other parts of the documentation -->\n",
    "\n",
    "We'll go over the basics of how to use the package and then go into more detail about how to use the different parts of the package in other tutorials\n",
    "\n",
    "The **default case** for the package assumes that you are trying to fit data from observations of a local group dwarf spheroiodal galaxy i.e. projected positions and line of sight velocities of stars.\n",
    "\n",
    "This means a couple of things regarding defaults values (on the priors).\n",
    "We Assume that the observations which you have are stars which contribute a negligible amount to the total mass of the system i.e. `masslesss' tracers, which are embedded in a dark matter halo.\n",
    "\n",
    "Although you have complete control over the parametrizations and therefore priors which you use, based on previous works we have a set of models and priors which maybe convenient for you to use and which should work with the base case as define above.\n",
    "\n",
    "(If there is a parametrization of some parameter which is not already included it is particularly easy to define a new model which can then be used with dynamicall)\n",
    "\n",
    "*Hopefully there is a tutorial on how to do this.*\n",
    "\n",
    "First start with the imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"XLA_FLAGS\"] = '--xla_force_host_platform_device_count=2'\n",
    "import numpyro\n",
    "numpyro.enable_x64()\n",
    "import jax\n",
    "import jax.numpy as jnp\n",
    "from jax._src.config import config\n",
    "config.update(\"jax_enable_x64\", True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TL;DR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jax.local_device_count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[CpuDevice(id=0), CpuDevice(id=1)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jax.devices('cpu')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should pretty much always enable double precision when using this package.\n",
    "\n",
    "If it becomes annoying to keep typing it in every notebook, you can add it to your .zshrc file (or whatever appropriate file for your shell)\n",
    "```bash\n",
    "export JAX_ENABLE_X64=True\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "# use my stylesheet\n",
    "plt.style.use('/Users/juan/phd/matplotlib/jdefault.mplstyle') # this should be changed something in the repo\n",
    "\n",
    "#sampling and inference\n",
    "# import numpyro\n",
    "from numpyro.diagnostics import hpdi\n",
    "import numpyro.distributions as dist\n",
    "from numpyro import handlers\n",
    "from numpyro.infer import MCMC, NUTS\n",
    "\n",
    "#need to get rid of\n",
    "import numpy as np\n",
    "\n",
    "# project\n",
    "from dynamicAll import models,fit,data\n",
    "from dynamicAll.fit import Fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First load mock data\n",
    "# TODO: use mock data from the package,you idiot\n",
    "# Lets read in some mock data -- we can also generate fake data for a wide variety of models.\n",
    "dataSet = pd.read_csv('../../notebooks/data/gs010_bs050_rcrs025_rarcinf_cusp_0064mpc3_df_1000_3_err.dat')\n",
    "# Theres no error column in this data set, but we can just add it.\n",
    "error = np.full_like(dataSet['x'],2.0)\n",
    "# append error to dataSet\n",
    "dataSet['error'] = error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If only one error is provided I'll assume thats the error for each component of the velocity.\n",
    "Otherwise you should append an error for each component of the velocity. \n",
    "\n",
    "**The naming convention is 'd_' + component name.**\n",
    "\n",
    "**So for example, if you have a velocity component called 'vz' then the error should be called 'd_vz'**\n",
    "\n",
    "**NOTE: If you provide the error for one component, you must supply them for all velocity component**\n",
    "\n",
    "The error on the positions seems to alway be neglected since its usually small so we'll keep ignoring it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. The Data class\n",
    "```python\n",
    "from dynamicAll import data\n",
    "```\n",
    "The data module contains a wrapper for your data and comes with several helper functions to visualize the data.\n",
    "This could help with picking a better parametrization for your model if the default ones arent giving great answers or if you are unsure what to use.\n",
    "\n",
    "Currently there are three subclassses of the data class,\n",
    "- MockData\n",
    "- DCJLData <!--TODO: change this to simulation data -->\n",
    "- KeckData\n",
    "\n",
    "Lets start with using mock data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "system = data.MockData(dataSet)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Spatial data\n",
    "The first thing you might want to do is look at the spatial data and velocity dispersion.\n",
    "This might influence the particular models you pick for the the tracers and the potential -- and if you have proper motions the velocity anisotropy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "R_center,nu = system.spatial_density() # dumb name, should change it.\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "ax.step(R_center,nu,where='mid')\n",
    "ax.set(\n",
    "    xlabel = 'R [kpc]',\n",
    "    ylabel =r'$\\rm\\Sigma(R)~N~kpc^{-3}$',\n",
    "    xscale = 'log',\n",
    "    yscale = 'log',\n",
    "); "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Preliminary fitting\n",
    "\n",
    "You can try fitting a plummer, or other model to this data.\n",
    "\n",
    "Scipy's curve fit is good enough to do this for a simple model like a plummer sphere.\n",
    "Since the observational data will usually be projected positions, we'll stick to those.\n",
    "\n",
    "In this case we'll fit our projected data to a plummer sphere.\n",
    "\n",
    "```python\n",
    "models.Plummer.projection()\n",
    "```\n",
    "\n",
    "If you want something more -- non parametric, you could\n",
    "1. fit a sum of gaussians to the data -- Thats possible\n",
    "2. Use B-splines to fit the data.\n",
    "\n",
    "Depending on your goals one or the other may prove more useful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define function you want to fit the data to\n",
    "func = models.Plummer._projection\n",
    "# plot curve_fit of curve\n",
    "fig, ax,popt = system.fit_projection(func,p0 = [1e3,0.25])\n",
    "\n",
    "# plot B-spline fit\n",
    "ax.plot(R_center,system.bspline_projected(R_center),\n",
    "    linestyle='-.',\n",
    "    label='B-spline fit')\n",
    "# plot truth\n",
    "ax.plot(R_center,models.Plummer._projection(R_center,1e3,0.25),\n",
    "    label='truth',\n",
    "    linestyle ='--')\n",
    "ax.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What may prove more Useful is to use the photometry to fit the photometry in order to calculate the surface brightness profile. The use those constraints in order to put priors on the tracer density profile, or even fix it all together. This part should be well constrained even with a few stars so it shouldnt affect the results very much."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Velocity data\n",
    "\n",
    "### Mass Estimator e.g. $\\rm M_{Wolf}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The simplest thing you might want to do with the velocity data is calculate the velocity dispersion (Average velocity dispersion of your data) and calculate a mass estimate at the half-light radius.\n",
    "\n",
    "You can do both \n",
    "```python\n",
    "mean_vdisp = system.velocity_dispersion(component='los')\n",
    "```\n",
    "or\n",
    "```python\n",
    "wolf_mass = system.mass_estimator('Wolf',rhalf= 0.25)\n",
    "```\n",
    "If you prefer a different mass estimator, I've included the \"Walker\" estimator which should give you a similar answer.\n",
    "If you have proper motions, you could use the mass \"Errani\" mass estimator as well\n",
    "\n",
    "Since we're dealing with mock data at the moment we do have all the components so lets estimate all of them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# wolf_mass = system.mass_estimator('Wolf',rhalf= 0.25) # If you're data set has rhalf in it. You dont need to supply it, but it'll work either way"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### velocity dispersion: $\\rm\\sigma_{los}(R)$\n",
    "\n",
    "If you have sufficient data ($N_{\\star}\\sim 10^{3}$) It may be useful to inspect the velocity dispersion as a function of radius.\n",
    "\n",
    "We offer to versions of doing this, Either using binning which works well with a large number of stars, or non-parametrically using B-splines.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we're using mock data we have every component, so lets walk through some of the data products you can make.\n",
    "\n",
    "A simple calculation you can do is the calculate the velocity dispersion as a function of radius.\n",
    "```python\n",
    "system.dispersion(ri,vi,error,component,bin_func,bins)\n",
    "```\n",
    "This returns three things,\n",
    "- r_center\n",
    "- dispersion\n",
    "- dispersion_error\n",
    "\n",
    "If that's too much writing, you can instead call dispersion_i() which takes a component argument and returns the corresponding dispersion.\n",
    "```python\n",
    "system.dispersion_i(component='los')\n",
    "```\n",
    "or if you have 6D data and want to find the dispersion in each of the spherical components\n",
    "- 'radial'\n",
    "- 'theta'\n",
    "- 'phi'\n",
    "\n",
    "or if you have 5D -- 2D spatial data (propjected position \"R\") + 3D  velocity (i.e. proper motions) --- you can calculate the two additional dispersions\n",
    "- 'pmr'\n",
    "- 'pmt'\n",
    "\n",
    "When you first initialize the data class, it'll tell you which components are available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY0AAAESCAYAAAABl4lHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWNklEQVR4nO3de5RlZX3m8e/DbQQJNJe4XJJgiw7RqOjE9jYw2OINXRrNOMZEYQUSLcDRlYgx9BJlMRkj4EjUZGSShnAdNTpqxsu0EYGpQQlB8AILFEdEEKOMIaAkXESb3/xxdsvhcLr7PadO1TlV9f2sdVbX3vvde/9O7a566t3v3vukqpAkqcUO0y5AkrR8GBqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqdlO09hpkh2ADwBPohdc7wBuBc4ENgPXA8dW1f196+wInA2s7dY5uqpuWNrKJWl1yzRu7kvyb4DDqur0JGuAj9ILi9+rqu8n+UPgh1V1ft86xwA7VtUZSdYCf15VL1vy4iVpFZvK6amq+mpVnd5N7gr8GLi7qr7fzbsAOGxgtecCH+zWvwlIkqn0lCRptZrqL90kewNnAe8CjupbdBuw90DzParqx33TdwB7ALcPbHMOmOsmnzbJeiVptaiqDJs/tdBI8gjgHOB44Jbu3y32ZSAMgDuT7NkXHHsBdw5ut6o2Ahu7fZTP1pKk0SRD8wKY0umpJI8CzgXeWFXfrKq7gV27+QBHAhcPrHYJ8Npu/bXA5qr62dJULEmC6Q2E/ylwOPDDbtbtwIn0TlU96OqpJO8H/oBewJ0NPAYIcFRVfXs7+7GnIUkjSrLV01NTCY2lYmhI0ui2FRre3CdJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmhoYkqZmhIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhkakqRmUwuNJGuSbEqyoZv+bJL57nVLkkMG2q9PcmNfm8OnU7kkrV47TXHfpwGbgN0BqurFAEkCfA64Ysg6G6vq1CWrUJL0IFPraVTVMcC1Qxa9HPhcVf10yLIjklye5IIkOy9uhZKkQbM4pnEscOaQ+ZcDT66qZwPXAEcPWznJXJKrkly1iDVK0qo0U6GR5FDgmqq6c3BZVf2kqqqb/ARw0LBtVNXGqlpXVesWsVRJWpVmKjSANwPvH7YgyeuTPKGbfCnwlSWrSpIEzFBoJHkycGdV/UPfvN2SbBn4vgI4K8k8cCBw3tJXKUmrWx4447PyJKmV/P4kaTEkoaoybNnM9DQkSbPP0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVKzqYVGkjVJNiXZ0E2fnOQrSea71yMH2u+e5FPdsguT7DudyiVp9dppivs+DdgE7N437w1V9fdbaX8i8BdVtSnJ07v1f2+Ra5Qk9ZlaT6OqjgGu7Z8FvKfrbbxlyCpPBT7brXslsN+w7SaZS3JVkqsmXLIkrXqzNKZxWlUdAjwdOCTJ4weWV1VV3/T9wzZSVRural1VrVusQiVptZqZ0Kiqe7t/NwOfAZ400CQD0zNTuyStFjPzizfJO5PslmQH4IXA1QNNvprkJV3bpwPfW+oaJWm1m+ZA+KDrgHngJ8B5VfWtJLsBJ1XVBuBPgA8nOaFr89tTq1SSZtj69esBmJ+fn/i28+BhgpUlSY3z/hbzGy5Ji22hv8OSUFWDQwLADJ2ekiTNPkNDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkLSirF+//ueP0dDkzdIDC2fGl797BwDrTrtoypVM32677MjcwQdwxDMePe1SJM0Aexraprvv28zGy26cdhmSZoShoe26+77N0y5B0ozw9NQQT9t/LwDmT3j+lCuZLk/PSRpkT0OS1MzQkAZ49Y3fA22doSFJarbdMY0kZ4+4zbuq6k1j1iNJmmEtA+EvBl4NDP282AEBzge2GxpJ1gAfAi6tqlOTPAt4D3A/cCPw+qr6aV/79cDZwHe7WadW1d821CRJmpCW0Pirqrq0dYNJzm9sehqwCdi9m3418BtV9Y9J/gR4LnDhwDobq+rU1lokSZO13dCoqrf3TyfZFXhEVd2c5BeAtwL3Ae+tqrsG229ju8d0vYdnddNv7lu8O/APQ1Y7IsnLgRuA3+3vifTVNwfMtdSgle2/f+lmNl5248j3mXxzO08E8C55rWbjDISfA7yh+/oM4ADgl4CzJlFQkqOBe6rquoFFlwNPrqpnA9cARw9bv6o2VtW6qlo3iXq0fI0TGC28S16r2Tg39x0MvCbJzvTGO9YCd9Mbh1iQJMcBa6vqhMFlVfWTvslPAG8ebCP1W8w72b1LXqvVOKFxN/AweuFxdVX9S5JdaBso36okxwO/MCwwuuWvB75YVd8AXgp8ZSH725b5+fnF2rSm5KoR7u5f/9mtPxFgOd4lP85puu2doptly6n25Xiqc5zTU38GfJ3elU/v7ea9F/jMuEUk2RN4J/DcJPPd69eT7JZky8D3FcBZSeaBA4Hzxt2ftJos1mk6LdxyPNXZcp/GDlV1/5bpqvpAkk3A5qracvnrRuAbo+68quaB+W5yt60029C1vYZe70bSCAyM2bbcjk/L6amjkryO3kD3h6vqnqr6Tn+Dqrp6UaqTNFGtp+m2dYpu1i2X2pfD6bNhWi65PTvJ/wZeD3wtyUX07pcwKLQiOaYlbV3TmEZVfaeq3gY8EbgEeHeSy5P8bnffhiRpFRhpILyqflZVH6+qFwGvAR5Hr/dxRpKnLkaBkqTZMfZTbof0Pk5Lst/EKtOq4qO4H8rviWbRgj+5r6p+Bnyse0mSVrCRQyPJXsAfAU+hd5Pfz1XVYROqSzNmsa/0WE43ZK0GXgygrRmnp3E+cC294PjnyZajWbLbLjsuu2vIh9ltlx2nXYK0YowTGgdV1csmXolmztzBByz7u4m3PKZB0mSMExq3JnlkVd068Wo0U454xqOX7Jk4y+WGrElpeR6Up+w0i8YJjaOBjyX5W+AWoLYsqKrWD2CSHmQlnEPfcqVTy3uZRg/O03SahHFC45XAPsAaoP9/YQ1tLekhphEYnqbTJIwTGv8R+NdV5SC4NAFbex7Uajtlp+VhnJv7bgXumXQhkqTZN05P41TgzCR/TG9Mo/+x6fdvdS1JWgLLcXxs0hc79F9EMcoHkLUYJzQ+1P37OzwwjpHua0faJKnBcr0PapzQ2Lmqlt87lSZs8K/DSV8iuxz/Yla75Xof1Dih8XDgzsGZSdZ3n8QnrViT/uvQy2BXr8W8D2oxL6IYZyD8c0ke3j8jyUuAj06mJGl2zR18wMR+0XsZrJajcXoal9ALjhdU1T1JXgX8GfDyUTaSZA298ZFLq+rUJL8KnAlsBq4Hju0fWE+yI3A2sJZe2B1dVTeMUb80tm39deglsloNRu5pVNWJwEXAZ5McC5wOvKCqLh9xU6cBm/qmTwdeVVWHAv8XOGKg/euAK6rqOcCRwHtHrV2StDBjfQhTVZ0MXAi8BXhOVV07xjaOofe0XJLsBtxdVd/vFl8ADD5m/bnAB7t1b+qtlgV/Hogkqd12f+km+Q7DHxESYFfg4iQBqqrGPUG7F3B73/RtwN4Dbfaoqh/3Td8B7DGwHknmgLkx65AkbcN2Q6OqHrMEddzBg0NiXwbCALgzyZ59wbEXQ67iqqqNwEaAJD4PS5ImqKWnsU9V/VPrBkdtD1BVdyfZNcmjulNURwIXDzS7BHgtcEaStcDm7qNmpZngfRVaDVrGNK4ccZujtt/iLcD/SHIpcCDd+EWS93env/4KeGa3/ALg+DH3I0kaU6q2fQYnyb3A37VuD3hSVf3iQgubhCS1vfcnSSvNKJ/tMkwSqirDlrVcffQrI+7PhxZK0grVMhB+81IUIkmafWPdpyFJWp0MDUlSM0NDktRsQaGR5MNJ9ui+/vXu4YWSpBVqoT2NJ1bVnd0Tat8FrE/y5xOoS5I0gxb6wL+fdjfeHQ2cUlUfTPLlCdQlSZpBCw2N/wZ8BVgDnNzNe/jWGkuSlrcFhUZVnZXkY8DPququJI8D/n4ypUmSZs2CQiPJzsArgF9M8nXgs1V11ATqkiTNoIUOhP81sA64B3gp8JUkBy64KknSTFromMYBVfXKLRNJngqcBRy6wO1KkmbQQnsa/9yNYwBQVV+j9+FIkqQVaKE9jTcCn0yyCfg68ATABxxK0gq1oJ5GVV0D/BpwFfBo4NvAb06gLknSDBqrp5HkfcDVwDXAtVX1kUkWJUmaTSOFRpIDqupGep/XfRDwYuCJSQq4jl6IXFNVn554pZKkqRu1p/GtJK+tqr8GPrVlZpKHAU+iFySHAYaGJK1Ao4ZGgN9P8p+AAq4Ezq+qz9Mb17hqIcUkeTVwXDe5I/CTqnp+3/JLeGAc5taq+q2F7E+SNJpxxjT2B84D7qJ3Y98nk3wImKuqBX0+eDc28hGAJL8N7DnQ5L6qOnwh+5AkjW+c0HhNVf2fLRPdfRqfAU4ATplUYfSenPvywZlJLqb3gMS3VtUlE9yfJGk7Rr3k9jbgh/0zquoG4PeB102qqCQvAi6rqnsGFr2iqp4HvAB4V/dY9sF155JclWRBp8okSQ81amh8DZgbMv9mYL8FV/OANwEfGJxZVfd2/94OfAvYZ0ibjVW1rqrWTbAeSRKjh8bbgbkkH02yPsneSfYD3gHcOImCkjwduLmqbhuYv0+St3VfrwH2H2wjSVpcI41pVNWXkjwTeD/weR4InXuA/zChmt4KvG3LRJIjgeur6soupC4H7gU2TGh/kqRGqarxVkz2AZ5G79LYK7pTRjMlSY37/iRpuVq/fj0A8/PzY62fhKp6yJgxLOCBhVX1T8CF464vSVp+FvpodEnSKmJoSJKaGRqSpGZjD4QvBw6ES9LotjUQbk9DktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNZu50Ehye5L57rVhYNmrk1zevY6ZVo2StFqN/Rnhi+hLVXX44MwkewDHAYdU1eYkn0zyuaq6ackrlKRVauZ6GsCTk3whySVJfrlv/sHA31TV5m76Q8D6Ja9OklaxWexpPLaq7k3yTOAU4Ihu/t7AbX3tbgOeMrhykjlgbtGrlKRVaOZ6GlV1b/fvFcC+fYtuH5jet5s3uP7GqlpXVesWtVBJWoVmKjSSPCvJq7qvfw34Qd/iy4BXJNmxm34NML+0FUrS6paqmnYNP5dkT+ACYE/gDuBY4AXA9VV1ZZLfBI4HCji3qv5yO9urWXp/krQcJKGqMnTZSv6lamhI0ui2FRozdXpKkjTbDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1GynaRfQL8kOwAeAJ9ELtHdU1SV9yy/hgaC7tap+a+mrlKTVa6ZCA3gKcENVHZdkDfBR4JK+5fdV1eFTqUySNFunp6rqq1V1eje5K/D/BtskuTjJl5MctrTVSZJmracBQJK9gbOANw4sekVV3dst35Tk2VVVA+vOAXNLVKokrSoZ+J07dUkeAZwDHF9V39xGuwuAN1fVbdtoM5gpkqTtSEJVZdiymTo9leRRwLnAGwcDI8k+Sd7Wfb0G2H9bgSFJmrxZOz31h8Ba4JwkALcDfwNcX1VXJtk7yeXAvcCGqVUpSavUzJ2emiRPT0nS6JbN6SlJ0mwzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktTM0JAkNTM0JEnNDA1JUjNDQ5LUzNCQJDUzNCRJzQwNSVIzQ0OS1MzQkCQ1MzQkSc0MDUlSM0NDktRspkIjyX9J8sUkf5fkWQPL1ie5PMllSf54WjVK0mo2M6GR5EVAVdUhwEuAd/ctC/BO4AVVdTCwd5JDp1OpJK1eO027gD6HAR8EqKofJbkuydqqugl4PHBlVf1L1/YC4MXApYMbSTIHzPVNL3bdkrRqzExPA9gbuK1v+rZu3vaWPUhVbayqdd0rwJlVlUm+xt3mqOu1tN9em20tH7Zsa+2BL0/6+7jU3//F2N4o607jeG7jOK/Y4+kxndj3cKhZCo3bgX37pvft5m1v2fZ8euGlTWybo67X0n57bba1fNiyxfh+Tdqka1zI9kZZdxrHs3W/0zRLP6Ojrrvqjmmqalr7fpAkLwSeX1V/lGQN8Mmqek63LPRORR1eVXcl+a/AR6rqC9OreHVJclVVrZt2HZoMj+fKs1THdGbGNKrqwiTPT/JFej2gN3dBsktVfSbJ24GLktwPXGRgLLmN0y5AE+XxXHmW5JjOTE9DkjT7ZmlMQ5I04wwNSVKzmRnT0PKUZB/gBODrVXXulMvRmJKsB54BPAz4eFVdN9WCtGCL9bNpT0MAJFmTZFOSDX3zHvJYlyQvTHLulhe9Pzz+ckplaztajyvwnKp6N/CfgVdOpVg1GeGY/ohF+Nm0p6EtTgM2AbvDgx/r0l0C/Sng0Kq6ELiwf8Ukuy5xrWrXdFyB/pu5fIzCbGv9Wd2cZPOkd25PQwBU1THAtX2zHvRYF+C6JGuXvjItxAjHdb77y/Uk4GNLXKZGMO2fVXsa2pqtPbrlpsGG1Xs+2LlLUZQWbOhxrap5YH4aBWnBtvqzuhg/m/Y0tDULeXSLZpfHdeVZ0mNqaGhrLgZeC72BN+BXu79atLx5XFeeJT2mnp7SUMMe6zLtmrRwHteVZ6mPqY8RkSQ18/SUJKmZoSFJamZoSJKaGRqSpGaGhiSpmaEhSWpmaEiSmhka0iJJclP3elmS9d2j5Ce9j4uT/CjJUZPetjSMoSE16j5D5LYuCL6X5MYkpyTZ6pMVqmptVX16sWqqqucB71us7UuDDA1pNBu6IPgl4N8ChwAnTrkmackYGtKYqupW4KPAumnXIi0VQ0MaU5IDgd9hxM+hSPKwJBcl+Yv0nJzkXUlOT/LdJLcm+XCSR/atsybJmUl+0LU5J8nuE35L0nYZGtJoTu3GNO4GPgx8iBHGFJL8K+B/At8AjqsHnhj6JuAW4ADgUcAXgM8n2TlJunV+AOwPPAb4NvDLE3g/0kh8NLo0mg1VdVaSc4B/rKo/HWHdXYCPA9+oqsHHV19cVe/rmz4jyW8A/55eQOxbVSf1LX/nGLVLC2ZPQxrPScBckseMsM4TgH8HnDdk2VeHzLsaeCy9nsU3R65QWgSGhjSGqroF2Ai8e4TVrgaOBP5XkscPLHvqkPYH0etlfAf4lTHKlCbO0JDGdwrwvCQHt65QVZ8CNtAbr+jvpbwwyR8k2SnJDkneADwS+ATwZeD2JCd1y3dMcmKSJ0zyzUgtDA1pTFV1B73geG83WN263gXAe4CLk+zXzT4DeBzwXeD7wHOAF1XVT7vB8lfQO031PXo9j8d2baUl5ce9SoskyU1Vtbah3cnATlX19jH3czJwU1WdO8760ijsaUiL584tz55arB0kuRg4FrhvsfYh9fOSW2mRVNVBS7CP5y32PqR+9jQkSc0c05AkNbOnIUlqZmhIkpoZGpKkZoaGJKmZoSFJamZoSJKa/X9hnLgCGOFpJQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "r_center,dispersion,error = system.dispersion_i(component ='los')\n",
    "\n",
    "# Or if you just want to plot it\n",
    "fig,ax = plt.subplots()\n",
    "system.plot_dispersion_i(component ='los',fig=fig,ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# method 1 \n",
    "r_center, dispersion,error = system.dispersion(system._R,system._vz,system._error)\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "ax.step(r_center,dispersion,where='mid')\n",
    "ax.errorbar(r_center,dispersion,yerr=error,fmt='none',ecolor='k',elinewidth=1.5)\n",
    "ax.set(\n",
    "    xscale = 'log',\n",
    "    xlabel = 'R [kpc]',\n",
    "    ylabel =r'$\\sigma_{los}$ [km/s]',\n",
    "    ylim   = (0,20),\n",
    ");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'los': (Array([ 0.02635787,  0.16527294,  0.33146564,  0.42925691,  0.64295691,\n",
       "          1.18709929,  2.98829428, 10.7779965 ], dtype=float64),\n",
       "  Array([13.378401  , 11.32803371, 12.46153614, 10.41200497, 11.09698437,\n",
       "         12.22271395, 12.16343862, 10.66029099], dtype=float64),\n",
       "  Array([1.15016566, 0.27595601, 0.54962351, 0.62772577, 0.54649566,\n",
       "         0.80806626, 1.4332354 , 4.03212505], dtype=float64))}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "system._cached_dispersion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Array([ 0.02635787,  0.16527294,  0.33146564,  0.42925691,  0.64295691,\n",
       "        1.18709929,  2.98829428, 10.7779965 ], dtype=float64)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "system._cached_dispersion['los'][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jeans Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "from dynamicAll import models\n",
    "```\n",
    "models contains all of the built in parameterization of models we will use to fit the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As expected from this mock data, generated from the velocity dispersion profile of Draco, we see that the velocity dispersion is roughly constant with radius at around $12.5\\rm~km~s^{-1}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For our Jeans Modeling we need to initialize our Fit class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "UserWarning: \n",
      "No tracer model defined.\n",
      "Using default Plummer model.\n",
      "\n",
      "UserWarning: \n",
      "No DM model defined.\n",
      "Using default HernquistZhao model.\n",
      "\n",
      "UserWarning: \n",
      "No anisotropy model defined.\n",
      "using default BetaConstant model\n",
      "\n",
      "UserWarning: \n",
      "No priors defined.\n",
      "Using default priors for each model\n"
     ]
    }
   ],
   "source": [
    "fit_cls = Fit()\n",
    "# fit_cls  = Fit(tracer_model,dm_model,anisotropy_model)\n",
    "# output = fit_cls.fit(data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you call it this way you are using the default values for all parameters and priors.\n",
    "This is equivalent to initializing the model as follows:\n",
    "\n",
    "```python\n",
    "priors = fit.Priors()\n",
    "\n",
    "tracer_model     = models.Plummer\n",
    "priors.add_prior('M', dist.LogUniform(1e-2,1e5))\n",
    "priors.add_prior('b', dist.LogUniform(1e-3,1e3))\n",
    "\n",
    "dm_model         = models.HernquistZhao\n",
    "\n",
    "priors.add_prior('rhos', dist.LogUniform(jnp.exp(-2),jnp.exp(5)))\n",
    "priors.add_prior('rs', dist.LogUniform(jnp.exp(-3),jnp.exp(3)))\n",
    "\n",
    "priors.add_prior('a', dist.Uniform(-3,3))\n",
    "priors.add_prior('b', dist.Uniform(.1,3))\n",
    "priors.add_prior('c', dist.Uniform(.1,3))\n",
    "\n",
    "anisotropy_model  = models.BetaConstant\n",
    "priors.add_prior('beta0', dist.Uniform(-5,1))\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "priors = fit.Priors()\n",
    "\n",
    "tracer_model     = models.Plummer\n",
    "dm_model         = models.gNFW\n",
    "\n",
    "priors.add_prior('dm_rhos', dist.LogUniform(1e5,1e11))\n",
    "priors.add_prior('dm_rs', dist.LogUniform(1e-2,1e1))\n",
    "\n",
    "priors.add_prior('dm_gamma', dist.Uniform(-2,2))\n",
    "\n",
    "anisotropy_model  = models.BetaConstant\n",
    "# priors.add_prior('beta_0', dist.Uniform(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Array(0.04978707, dtype=float64, weak_type=True),\n",
       " Array(7.3890561, dtype=float64, weak_type=True))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jnp.exp(-3),jnp.exp(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "UserWarning: \n",
      "No tracer model defined.\n",
      "Using default Plummer model.\n",
      "\n",
      "UserWarning: \n",
      "No DM model defined.\n",
      "Using default HernquistZhao model.\n",
      "\n",
      "UserWarning: \n",
      "No anisotropy model defined.\n",
      "using default BetaConstant model\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fit_cls = fit.SphGalaxy(priors=priors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter: dm_rhos, Distribution: LogUniform, Bounds: (1.00e+05, 1.00e+11)\n",
      "Parameter: dm_rs, Distribution: LogUniform, Bounds: (1.00e-02, 1.00e+01)\n",
      "Parameter: dm_gamma, Distribution: Uniform, Bounds: (-2.00e+00, 2.00e+00)\n"
     ]
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_cls._priors"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because this is our tracer model, we only have to define a prior on the scale radius of the tracer population, but we'll still define a prior on the total \"Mass\" of the tracers, but it's ultimately just the number of tracers.\n",
    "We'll assume a uniform prior on the logarithm of the scale radius, with limits of 0.1 and 10 kpc.\n",
    "There's a somewhat convenient Priors class that we can use to define our priors on each component of our model.\n",
    "The default priors are based on previous authors works,  e.g. [(Chang et. al.)](https://academic.oup.com/mnras/article/507/4/4715/6358538)\n",
    "\n",
    "$$\n",
    "\\begin{array}{lc}\n",
    "\\hline \\text { Parameter } & \\text { Prior } \\\\\n",
    "\\hline \\log _{10}\\left(r_* / \\mathrm{kpc}\\right) & {[-3,3]} \\\\\n",
    "\\log _{10}\\left(L / L_{\\odot}\\right) & {[-2,5]} \\\\\n",
    "\\ln \\left(\\rho_0 /\\left(M_{\\odot} \\mathrm{kpc}^{-3}\\right)\\right) & {[5,30]} \\\\\n",
    "\\left.\\ln \\left(r_s / \\mathrm{kpc}\\right)^{-1}\\right) & {[-10,10]} \\\\\n",
    "\\bar{v} /\\left(\\mathrm{km} \\mathrm{s}^{-1}\\right) & {[-100,100]} \\\\\n",
    "\\gamma & {[-1,5]} \\\\\n",
    "\\hline\n",
    "\\end{array}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The LogUniform distribution is a distribution over positive reals that is uniform in log space. It is useful for fitting parameters that naturally live on a log scale. Note that the distribution is the same regardless of the base of the logarithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d9ef965989854f1ca03c3ec0a6f3dc90",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/5000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c103b87bc7df4b77a6d32e46499686e0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/5000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mcmc = fit_cls.fit_dSph(\n",
    "            data=system,\n",
    "            num_chains=2,\n",
    "            num_samples=4000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you're running this on your laptop -- you may get a warning about the number of cores you're using. \n",
    "You can ignore this for now, although if you find the time to run this becoming large you may consider using a cluster with GPUs or TPUs to speed up the fitting process.\n",
    "\n",
    "We'll user arviz and corner to visualize the results of our fit.\n",
    "However, if you just want the samples you can write\n",
    "\n",
    "```python\n",
    "samples = mcmc.get_samples()\n",
    "```\n",
    "\n",
    "```python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sd</th>\n",
       "      <th>hdi_3%</th>\n",
       "      <th>hdi_97%</th>\n",
       "      <th>mcse_mean</th>\n",
       "      <th>mcse_sd</th>\n",
       "      <th>ess_bulk</th>\n",
       "      <th>ess_tail</th>\n",
       "      <th>r_hat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dm_gamma</th>\n",
       "      <td>1.100000e+00</td>\n",
       "      <td>4.940000e-01</td>\n",
       "      <td>0.286</td>\n",
       "      <td>1.683000e+00</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.013</td>\n",
       "      <td>875.0</td>\n",
       "      <td>783.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dm_rhos</th>\n",
       "      <td>5.948310e+07</td>\n",
       "      <td>6.015588e+07</td>\n",
       "      <td>5969433.961</td>\n",
       "      <td>1.469989e+08</td>\n",
       "      <td>2299320.312</td>\n",
       "      <td>1641480.300</td>\n",
       "      <td>863.0</td>\n",
       "      <td>778.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dm_rs</th>\n",
       "      <td>1.496000e+00</td>\n",
       "      <td>1.067000e+00</td>\n",
       "      <td>0.355</td>\n",
       "      <td>2.985000e+00</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0.027</td>\n",
       "      <td>865.0</td>\n",
       "      <td>808.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  mean            sd       hdi_3%       hdi_97%    mcse_mean  \\\n",
       "dm_gamma  1.100000e+00  4.940000e-01        0.286  1.683000e+00        0.018   \n",
       "dm_rhos   5.948310e+07  6.015588e+07  5969433.961  1.469989e+08  2299320.312   \n",
       "dm_rs     1.496000e+00  1.067000e+00        0.355  2.985000e+00        0.038   \n",
       "\n",
       "              mcse_sd  ess_bulk  ess_tail  r_hat  \n",
       "dm_gamma        0.013     875.0     783.0    1.0  \n",
       "dm_rhos   1641480.300     863.0     778.0    1.0  \n",
       "dm_rs           0.027     865.0     808.0    1.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import arviz as az\n",
    "\n",
    "inf_data = az.from_numpyro(mcmc)\n",
    "az.summary(inf_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:Too few points to create valid contours\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import corner\n",
    "fig,ax = plt.subplots(ncols=3,nrows=3,figsize=(10,10))\n",
    "\n",
    "corner.corner(inf_data,fig=fig,\n",
    "            quantiles=[0.16, 0.5, 0.84],\n",
    "            show_titles=True,\n",
    "            # title_fmt='.2e',\n",
    "            truths=[1,6.4e7,1]);\n",
    "\n",
    "# ax[2,1].set(\n",
    "    # xlim=(1e5,1e8),\n",
    "    # xscale='log'\n",
    "# )\n",
    "# ax = ax.flatten()\n",
    "# ax[3].set(\n",
    "#     yscale='log'\n",
    "# )\n",
    "# ax[7].set(\n",
    "#     xscale='log'\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now output is itself a class, with various convenience methods that will plot the results "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py10",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
